name: Create Python Package and Release

on:
  workflow_dispatch:
  push:
    branches:
      - master        # 根据需要改成你的主分支名称
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Read version from pyproject.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(python - <<'PY'
          import tomllib, sys
          with open('pyproject.toml', 'rb') as f:
              doc = tomllib.load(f)
          version = None
          # 支持 PEP 621 的 [project].version 或 poetry 的 [tool.poetry].version
          version = doc.get('project', {}).get('version') or doc.get('tool', {}).get('poetry', {}).get('version')
          if not version:
              sys.exit('ERROR: version not found in pyproject.toml')
          print(version)
          PY
          )
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Compute tag name
        id: compute_tag
        shell: bash
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          else
            TAG_NAME="v${VERSION}"
          fi
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Create and push tag (only on branch push)
        id: create_tag
        if: startsWith(github.ref, 'refs/heads/')
        shell: bash
        env:
          TAG: ${{ steps.compute_tag.outputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          PUSHED=false
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "Tag ${TAG} already exists on remote — skipping tag creation."
            PUSHED=false
          else
            git tag -a "${TAG}" -m "Release ${TAG}"
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git" "${TAG}"
            echo "Pushed tag ${TAG}."
            PUSHED=true
          fi
          echo "pushed=${PUSHED}" >> $GITHUB_OUTPUT

      - name: Install build dependencies
        if: steps.create_tag.outputs.pushed == 'true' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package (sdist + wheel)
        if: steps.create_tag.outputs.pushed == 'true' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        run: python -m build

      - name: Ensure release exists (create or update)
        if: steps.create_tag.outputs.pushed == 'true' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.compute_tag.outputs.tag }}
          name: ${{ steps.compute_tag.outputs.tag }}
          body: Release ${{ steps.compute_tag.outputs.tag }}
          allowUpdates: true

      - name: Install gh CLI
        if: steps.create_tag.outputs.pushed == 'true' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # 不要显式登录，直接让 gh 使用 GITHUB_TOKEN 环境变量进行认证
      - name: Upload release assets (use gh --clobber to overwrite)
        if: steps.create_tag.outputs.pushed == 'true' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        env:
          REPO: ${{ github.repository }}
          TAG: ${{ steps.compute_tag.outputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # 传入即可，gh 会自动使用
        run: |
          gh --version
          gh auth status || true   # 可选：查看 auth 状态（不会抛错）
          gh release upload "${TAG}" dist/* --clobber -R "${REPO}"
